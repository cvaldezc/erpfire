// Generated by CoffeeScript 1.12.5
(function() {
  var app;

  app = angular.module('dsApp', ['ngCookies']).config(function($httpProvider) {
    $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
    $httpProvider.defaults.xsrfCookieName = 'csrftoken';
    return $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';
  });

  app.directive('stringToNumber', function() {
    return {
      require: 'ngModel',
      link: function(scope, element, attrs, ngModel) {
        ngModel.$parsers.push(function(value) {
          return '' + value;
        });
        ngModel.$formatters.push(function(value) {
          return parseFloat(value, 10);
        });
      }
    };
  });

  app.directive('file', function($parse) {
    return {
      restrict: 'A',
      scope: {
        file: '='
      },
      link: function(scope, element, attrs) {
        var model, modelSetter;
        model = $parse(attrs.file);
        modelSetter = model.assign;
        return element.bind('change', function(event) {
          var file;
          file = event.target.files[0];
          scope.file = file ? file : void 0;
          return scope.$apply();
        });
      }
    };
  });

  app.directive('minandmax', valMinandMax);

  app.factory('Factory', function($http, $cookies) {
    var frm, obj;
    $http.defaults.headers.post['X-CSRFToken'] = $cookies.csrftoken;
    $http.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';
    obj = new Object();
    frm = function(options) {
      var f, k, v;
      if (options == null) {
        options = {};
      }
      f = new FormData();
      for (k in options) {
        v = options[k];
        f.append(k, v);
      }
      return f;
    };
    obj.post = function(options) {
      if (options == null) {
        options = {};
      }
      return $http.post("", frm(options), {
        transformRequest: angular.identity,
        headers: {
          'Content-Type': void 0
        }
      });
    };
    obj.get = function(options) {
      if (options == null) {
        options = {};
      }
      return $http.get("", {
        params: options
      });
    };
    return obj;
  });

  app.controller('DSCtrl', function($scope, $http, $cookies, $compile, $timeout, $sce, $q, Factory) {
    var calcSumTemp;
    $http.defaults.headers.post['X-CSRFToken'] = $cookies.csrftoken;
    $http.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';
    $scope.perarea = "";
    $scope.percharge = "";
    $scope.perdni = "";
    $scope.dataOrders = new Array();
    $scope.snip = [];
    $scope.nip = [];
    $scope.orders = [];
    $scope.ordersm = [];
    $scope.qon = [];
    $scope.radioO = [];
    $scope.sdnip = [];
    $scope.lplanes = [];
    $scope.meditindex = -1;
    $scope.objedit = [];
    $scope.editm = {
      'brand': '',
      'model': '',
      'quantity': 0
    };
    $scope.status = false;
    $scope.sldm = [[0, 0], [0, 0]];
    $scope.pnp = 0;
    $scope.preorders = [];
    $scope.selectedniple = [];
    angular.element(document).ready(function() {
      var $table, i, len, ref, x;
      $scope.mdstatus = false;
      angular.element('.modal').modal({
        dismissible: false
      });
      angular.element('ul.tabs').tabs({
        'onShow': function() {
          return window.scrollTo(0, 680);
        }
      });
      angular.element('.collapsible').collapsible();
      $table = $(".floatThead");
      $table.floatThead({
        position: 'absolute',
        top: 65,
        scrollContainer: function($table) {
          return $table.closest('.wrapper');
        }
      });
      if ($scope.modify > 0) {
        $scope.modifyList();
        ref = new Array('n', 'm', 'd');
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          $scope.listTemps(x.toUpperCase());
        }
        $http.get('/brand/list/', {
          params: {
            'brandandmodel': true
          }
        }).success(function(response) {
          if (response.status) {
            $scope.lbrand = response.brand;
            $scope.lmodel = response.model;
            setTimeout((function() {
              angular.element("select").material_select();
            }), 1200);
          }
        });
      } else {
        $scope.getListAreaMaterials();
        $scope.getProject();
        $scope.listTypeNip();
      }
      $('textarea#textarea1').characterCounter();
      $('.datepicker').pickadate({
        container: "body",
        closeOnSelect: true,
        min: new Date(),
        selectMonths: true,
        selectYears: 15,
        format: "yyyy-mm-dd"
      });
      $scope.perarea = angular.element("#perarea")[0].value;
      $scope.percharge = angular.element("#percharge")[0].value;
      $scope.perdni = angular.element("#perdni")[0].value;
      $scope.listPlanes();
      angular.element('.materialboxed').materialbox();
    });
    $scope.run = function() {
      mailing.Mailing();
      mailing.geturls().success(function(response) {
        return console.info(response);
      });
    };
    $scope.getListAreaMaterials = function() {
      var data;
      $scope.dsmaterials = [];
      data = {
        dslist: true
      };
      $(".table-withoutApproved > thead").append("<tr class=\"white\"><td colspan=\"13\" class=\"center-align\"><div class=\"preloader-wrapper big active\"><div class=\"spinner-layer spinner-blue-only\"><div class=\"circle-clipper left\"><div class=\"circle\"></div></div><div class=\"gap-patch\"><div class=\"circle\"></div></div><div class=\"circle-clipper right\"><div class=\"circle\"></div></div></div></div></td></tr>");
      $http.get("", {
        params: data
      }).success(function(response) {
        if (response.status) {
          $(".table-withoutApproved > thead > tr").eq(1).remove();
          $scope.dsmaterials = response.list;
          $(".floatThead").floatThead('reflow');
          $scope.inDropdownTable(".table-withoutApproved");
          $('.dropdown-button').dropdown();
        } else {
          swal("Error!", "al obtener la lista de materiales del Ã¡rea", "error");
        }
      });
    };
    $scope.inDropdownTable = function(table) {
      if ($(table + " > tbody > tr").length > 0) {
        $('.dropdown-button').dropdown();
        return false;
      } else {
        setTimeout(function() {
          $scope.inDropdownTable(table);
        }, 1400);
      }
    };
    $scope.saveMateial = function() {
      var data;
      data = $scope.mat;
      data.savepmat = true;
      data.ppurchase = $("[name=precio]").val();
      data.psales = $("[name=sales]").val();
      data.brand = $("[name=brand]").val();
      data.model = $("[name=model]").val();
      data.code = $(".id-mat").text();
      if (data.quantity <= 0) {
        swal("Alerta!", "Debe de ingresar una cantidad!", "warning");
        data.savepmat = false;
      }
      if (data.ppurchase <= 0) {
        swal("Alerta!", "Debe de ingresar un precio de Compra!", "warning");
        data.savepmat = false;
      }
      if (data.psales <= 0) {
        swal("Alerta!", "Debe de ingresar un precio de Venta!", "warning");
        data.savepmat = false;
      }
      if (data.savepmat) {
        if (Boolean($("#modify").length)) {
          delete data['savepmat'];
          data.savemmat = true;
        }
        if ($scope.mat.hasOwnProperty("obrand")) {
          if ($scope.mat.obrand) {
            data.editmat = true;
          }
        }
        $http({
          url: "",
          data: $.param(data),
          method: "post"
        }).success(function(response) {
          if (response.status) {
            Materialize.toast("Material Agregado", 2600);
            if (Boolean($("#modify").length)) {
              $scope.modifyList();
            } else {
              $scope.getListAreaMaterials();
              if ($scope.mat.hasOwnProperty("obrand")) {
                $scope.mat.obrand = null;
                $scope.mat.omodel = null;
              }
            }
            $scope.gui.smat = !$scope.gui.smat;
          } else {
            swal("Error", " No se guardado los datos", "error");
          }
        });
      }
    };
    $scope.deleteDMaterial = function($event) {
      swal({
        title: "Eliminar material?",
        text: "realmente dese eliminar el material.",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#dd6b55",
        confirmButtonText: "Si!, eliminar",
        closeOnConfirm: true,
        closeOnCancel: true
      }, function(isConfirm) {
        var data;
        if (isConfirm) {
          data = $event.currentTarget.dataset;
          data.delmat = true;
          $http({
            url: '',
            method: 'post',
            data: $.param(data)
          }).success(function(response) {
            if (response.status) {
              $scope.getListAreaMaterials();
            }
          });
        }
      });
    };
    $scope.editDMaterial = function($event) {
      $scope.mat.code = $event.currentTarget.dataset.materials;
      $timeout((function() {
        var e;
        e = $.Event('keypress', {
          keyCode: 13
        });
        $("[name=code]").trigger(e);
      }), 100);
      $timeout((function() {
        var quantity;
        quantity = parseFloat($event.currentTarget.dataset.quantity);
        $scope.gui.smat = true;
        $("[name=brand]").val($event.currentTarget.dataset.brand);
        $("[name=model]").val($event.currentTarget.dataset.model);
        $scope.mat = {
          quantity: parseFloat(quantity),
          obrand: $event.currentTarget.dataset.brand,
          omodel: $event.currentTarget.dataset.model
        };
      }), 300);
    };
    $scope.getProject = function() {
      $http.get("/sales/projects/", {
        params: {
          'ascAllProjects': true
        }
      }).success(function(response) {
        if (response.status) {
          $scope.ascprojects = response.projects;
        } else {
          swal("Error", "No se a cargado los proyectos", "error");
        }
      });
    };
    $scope.getsector = function(project) {
      $http.get("/sales/projects/sectors/crud/", {
        params: {
          'pro': project,
          'sub': ''
        }
      }).success(function(response) {
        if (response.status) {
          $scope.ascsector = response.list;
        } else {
          swal("Error", "No se pudo cargar los datos del sector", "error");
        }
      });
    };
    $scope.ccopyps = function(sector) {
      swal({
        title: 'Copiar lista de Sector?',
        text: 'Realmente desea realizar la copia.',
        type: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#dd6b55',
        confirmButtonText: 'Si, Copiar',
        cancelButtonText: 'No, Cancelar',
        closeOnConfirm: true,
        closeOnCancel: true
      }, function(isConfirm) {
        var data;
        if (isConfirm) {
          if (sector) {
            data = {
              project: sector.substring(0, 7),
              sector: sector,
              copysector: true
            };
            $http({
              url: "",
              method: "post",
              data: $.param(data)
            }).success(function(response) {
              if (response.status) {
                location.reload();
              } else {
                swal("Error", "No se a guardado los datos.", "error");
              }
            });
          } else {
            swal("Alerta!", "El cÃ³digo de sector no es valido.", "warning");
          }
        }
      });
    };
    $scope.delAreaMA = function() {
      swal({
        title: 'Realmente desea eliminar?',
        text: 'toda la lista de materiales de esta area.',
        type: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#dd6b55',
        confirmButtonText: 'Si, Eliminar',
        cancelButtonText: 'No, Cancelar'
      }, function(isConfirm) {
        if (isConfirm) {
          $http({
            url: "",
            data: $.param({
              'delAreaMA': true
            }),
            method: 'post'
          }).success(function(response) {
            if (response.status) {
              location.reload();
            } else {
              swal("Alerta", "no se elimino los materiales del Ã¡rea", "warning");
            }
          });
        }
      });
    };
    $scope.availableNipple = function() {
      var mat;
      mat = this;
      swal({
        title: "Desea generar Niples para este material?",
        text: mat.$parent.x.fields.materials.fields.matnom + " " + mat.$parent.x.fields.materials.fields.matmed,
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#dd6b55",
        confirmButtonText: "Si, habilitar Niple",
        cancelButtonText: "No",
        timer: 2000
      }, function(isConfirm) {
        if (isConfirm) {
          $http({
            url: "",
            data: $.param({
              'availableNipple': true,
              'materials': mat.$parent.x.fields.materials.pk,
              'brand': mat.$parent.x.fields.brand.pk,
              'model': mat.$parent.x.fields.model.pk
            }),
            method: "post"
          }).success(function(response) {
            if (response.status) {
              swal("InformaciÃ³n", "Nipple habilitado para el material", "info");
            }
          });
        }
      });
    };
    $scope.listNipple = function() {
      var data;
      data = {
        'lstnipp': true,
        'materials': this.$parent.x.fields.materials.pk
      };
      $http.get("", {
        params: data
      }).success(function(response) {
        var $dest, $det, $edit, $ori, count, el, script, tbs;
        if (response.status) {
          count = 1;
          response.desc = function() {
            return function(type, render) {
              var k, ref, v;
              ref = response.dnip;
              for (k in ref) {
                v = ref[k];
                if (k === this.fields.tipo) {
                  return render(v);
                }
              }
            };
          };
          response.index = function() {
            return count++;
          };
          script = "{{#nip}}<tr class=\"text-12\"><td class=\"center-align\">{{index}}</td><td class=\"center-align\">{{fields.cantidad}}</td><td class=\"center-align\">{{fields.cantshop}}</td><td class=\"center-align\">{{fields.tipo}}</td><td>Niple {{#desc}}{{>fields.tipo}}{{/desc}}</td><td>{{fields.materiales.fields.matmed}}</td><td>x</td><td>{{fields.metrado}} cm</td><td>{{fields.comment}}</td><td><a href=\"#\" ng-click=\"nedit($event)\" data-pk=\"{{pk}}\" data-materials=\"{{fields.materiales.pk}}\" ng-if=\"perarea == 'administrator' || perarea == 'ventas' || perarea == 'operaciones' || percharge == 'jefe de almacen'\"><i class=\"fa fa-edit\"></i></a></td><td><a href=\"#\" ng-click=\"ndel($event)\" data-pk=\"{{pk}}\" data-materials=\"{{fields.materiales.pk}}\" class=\"red-text text-darken-1\" ng-if=\"perarea == 'administrator' || perarea == 'ventas' || perarea == 'operaciones' || percharge == 'jefe de almacen'\"><i class=\"fa fa-trash\"></i></a></td></tr>{{/nip}}";
          $det = $(".nip" + data.materials);
          $det.empty();
          tbs = Mustache.render(script, response);
          el = $compile(tbs)($scope);
          $det.html(el);
          $ori = $("#typenip > option").clone();
          $dest = $(".t" + data.materials);
          $dest.empty();
          $dest.append($ori);
          $scope.calNipple(data.materials);
          $edit = $("#nipple" + data.materials + "edit");
          $edit.val("");
          $edit.removeAttr("data-materials");
          $edit.removeAttr("data-meter");
          $edit.removeAttr("data-quantity");
        } else {
          console.log("nothing data");
        }
      });
    };
    $scope.calNipple = function(materials) {
      var dis, ing, tot;
      tot = parseFloat($(".to" + materials).text() * 100);
      ing = 0;
      $(".nip" + materials + " > tr").each(function() {
        var $td;
        $td = $(this).find("td");
        ing += parseFloat($td.eq(1).text()) * parseFloat($td.eq(7).text().split(" cm"));
      });
      dis = tot - ing;
      console.log(tot);
      console.log(ing);
      console.log(dis);
      $(".co" + materials).html(ing);
      $(".dis" + materials).html(dis);
    };
    $scope.ndel = function($event) {
      swal({
        title: "Eliminar Niple?",
        text: $event.target.offsetParent.parentElement.childNodes[1].innerText + " " + $event.target.offsetParent.parentElement.childNodes[4].innerText + " " + $event.target.offsetParent.parentElement.childNodes[7].innerText,
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#dd6b55",
        confirmButtonText: "Si, eliminar!",
        cancelButtonText: "No!",
        closeOnCancel: true,
        closeOnConfirm: true
      }, function(isConfirm) {
        var data;
        if (isConfirm) {
          data = {
            delnipp: true,
            id: $event.currentTarget.dataset.pk,
            materials: $event.currentTarget.dataset.materials
          };
          $http({
            url: "",
            method: "post",
            data: $.param(data)
          }).success(function(response) {
            var $edit;
            if (response.status) {
              $edit = $("#nipple" + data.materials + "edit");
              $edit.val("");
              $edit.removeAttr("data-materials");
              $edit.removeAttr("data-meter");
              $edit.removeAttr("data-quantity");
              setTimeout(function() {
                $(".rf" + data.materials).trigger('click');
              }, 100);
            } else {
              swal("Error", "No se a eliminado el niple", "error");
            }
          });
        }
      });
    };
    $scope.nedit = function($event) {
      var materials;
      materials = $event.currentTarget.dataset.materials;
      $("#nipple" + materials + "measure").val($event.target.offsetParent.parentElement.childNodes[7].innerText.split(" cm")[0]);
      $("#nipple" + materials + "type").val($event.target.offsetParent.parentElement.childNodes[3].innerText);
      $("#nipple" + materials + "quantity").val($event.target.offsetParent.parentElement.childNodes[1].innerText);
      $("#nipple" + materials + "observation").val($event.target.offsetParent.parentElement.childNodes[8].innerText);
      $("#nipple" + materials + "edit").val($event.currentTarget.dataset.pk).attr("data-materials", materials).attr("data-quantity", $event.target.offsetParent.parentElement.childNodes[1].innerText).attr("data-meter", $event.target.offsetParent.parentElement.childNodes[7].innerText.split(" cm")[0]);
      setTimeout(function() {
        $(".sdnip" + materials).click();
      }, 100);
    };
    $scope.listTypeNip = function() {
      $http.get("", {
        params: {
          'typeNipple': true
        }
      }).success(function(response) {
        if (response.status) {
          $scope.tnipple = response.type;
        }
      });
    };
    $scope.saveNipple = function() {
      var $edit, cl, data, dis, meter, nw, quantity, row;
      row = this;
      data = {
        metrado: $("#nipple" + row.$parent.x.fields.materials.pk + "measure").val(),
        tipo: $("#nipple" + row.$parent.x.fields.materials.pk + "type").val(),
        cantidad: $("#nipple" + row.$parent.x.fields.materials.pk + "quantity").val(),
        cantshop: $("#nipple" + row.$parent.x.fields.materials.pk + "quantity").val(),
        comment: $("#nipple" + row.$parent.x.fields.materials.pk + "observation").val(),
        materiales: row.$parent.x.fields.materials.pk,
        nipplesav: true
      };
      if (data.measure === "") {
        swal("Alerta!", "No se ha ingresado una medida para este niple.", "warning");
        data.nipplesav = false;
      }
      if (data.quantity === "") {
        swal("Alerta!", "No se ha ingresado una cantidad para este niple.", "warning");
        data.nipplesav = false;
      }
      $edit = $("#nipple" + data.materiales + "edit");
      dis = parseFloat($(".dis" + data.materiales).text());
      nw = parseFloat(data.cantidad) * parseFloat(data.metrado);
      if ($edit.val() !== "") {
        data.edit = true;
        data.id = $edit.val();
        data.materiales = $edit.attr("data-materials");
        meter = parseFloat($edit.attr("data-meter"));
        quantity = parseFloat($edit.attr("data-quantity"));
        if ((nw < (meter * quantity)) || nw > (meter * quantity)) {
          dis += Math.abs((meter * quantity) - nw);
        } else if (nw === (meter * quantity)) {
          dis += meter * quantity;
        }
      }
      console.log(dis);
      console.log(nw);
      cl = dis - nw;
      console.log(cl);
      if (cl < 0) {
        swal("Alerta!", "La cantidad ingresada es mayor a la cantidad disponible de la tuberia.", "warning");
        data.nipplesav = false;
      }
      if (data.nipplesav) {
        $http({
          url: "",
          method: "post",
          data: $.param(data)
        }).success(function(response) {
          if (response.status) {
            $edit.val("").removeAttr("data-materials", "").removeAttr("data-quantity", "").removeAttr("data-meter", "");
            $("#nipple" + data.materiales + "measure").val("");
            $("#nipple" + data.materiales + "type").val("");
            $("#nipple" + data.materiales + "quantity").val("");
            $("#nipple" + data.materiales + "quantity").val("");
            $("#nipple" + data.materiales + "observation").val("");
            setTimeout(function() {
              $(".rf" + data.materiales).trigger("click");
            }, 100);
          } else {
            swal("Error", "No se a guardado el niple.", "error");
          }
        });
      }
    };
    $scope.showModify = function() {
      var data;
      $scope.btnmodify = true;
      data = {
        modifyArea: true
      };
      $http({
        url: '',
        method: 'post',
        data: $.param(data)
      }).success(function(response) {
        if (response.status) {
          location.reload();
        } else {
          swal("Error", "No se a podido iniciar la modificaciÃ³n.", "error");
        }
      });
    };
    $scope.modifyList = function() {
      var data;
      data = {
        modifyList: true
      };
      $http.get('', {
        params: data
      }).success(function(response) {
        if (response.status) {
          $scope.lmodify = response.modify;
          $scope.calcMM();
        } else {
          swal('Error', 'no se a encontrado datos', 'error');
        }
      });
    };
    $scope.showEditM = function($event) {
      var elem;
      elem = this;
      $http.get('/brand/list/', {
        params: {
          'brandandmodel': true
        }
      }).success(function(response) {
        var bel, btmp, mel, mtmp;
        if (response.status) {
          $scope.brand = response;
          $scope.model = response;
          response.ifbrand = function() {
            if (this.pk === elem.$parent.x.fields.brand.pk) {
              return "selected";
            }
          };
          response.ifmodel = function() {
            if (this.pk === elem.$parent.x.fields.model.pk) {
              return "selected";
            }
          };
          btmp = "<select class=\"browser-default\" ng-blur=\"saveEditM($event)\" name=\"brand\" data-old=\"" + elem.$parent.x.fields.brand.pk + "\">{{#brand}}<option value=\"{{pk}}\" {{ifbrand}}>{{fields.brand}}</option>{{/brand}}</select>";
          mtmp = "<select class=\"browser-default\" ng-blur=\"saveEditM($event)\" name=\"model\" data-old=\"" + elem.$parent.x.fields.model.pk + "\">{{#model}}<option value=\"{{pk}}\" {{ifmodel}}>{{fields.model}}</option>{{/model}}</select>";
          bel = Mustache.render(btmp, response);
          mel = Mustache.render(mtmp, response);
          $($event.currentTarget.children[3]).html($compile(bel)($scope));
          $($event.currentTarget.children[4]).html($compile(mel)($scope));
          $($event.currentTarget.children[7]).html($compile("<input type=\"number\" ng-blur=\"saveEditM($event)\" name=\"quantity\" min=\"1\" value=\"" + elem.$parent.x.fields.quantity + "\" data-old=\"" + elem.$parent.x.fields.quantity + "\" class=\"right-align\">")($scope));
          $($event.currentTarget.children[8]).html($compile("<input type=\"number\" ng-blur=\"saveEditM($event)\" name=\"ppurchase\" min=\"0\" value=\"" + elem.$parent.x.fields.ppurchase + "\" data-old=\"" + elem.$parent.x.fields.ppurchase + "\" class=\"right-align\">")($scope));
          $($event.currentTarget.children[9]).html($compile("<input type=\"number\" ng-blur=\"saveEditM($event)\" name=\"psales\" min=\"0\" value=\"" + elem.$parent.x.fields.psales + "\" data-old=\"" + elem.$parent.x.fields.psales + "\" class=\"right-align\">")($scope));
        }
      });
    };
    $scope.saveEditM = function($event) {
      var data;
      data = {
        materials: $event.currentTarget.parentElement.parentElement.children[1].innerText,
        name: $event.currentTarget.name,
        value: $event.currentTarget.value
      };
      if (data.name === "brand") {
        data.brand = $event.currentTarget.dataset.old;
        if (data.value === data.brand) {
          return false;
        }
      } else {
        data.brand = $event.currentTarget.parentElement.parentElement.children[3].children[0].value;
      }
      if (data.name === "model") {
        data.model = $event.currentTarget.dataset.old;
        if (data.value === data.model) {
          return false;
        }
      } else {
        data.model = $event.currentTarget.parentElement.parentElement.children[4].children[0].value;
      }
      if (data.name === 'quantity' || data.name === 'ppurchase' || data.name === 'psales') {
        if (parseFloat(data.value) === parseFloat($event.currentTarget.dataset.old)) {
          return false;
        }
      }
      data.editMM = true;
      $http({
        url: '',
        method: 'post',
        data: $.param(data)
      }).success(function(response) {
        var x;
        if (response.status) {
          $scope.calcMM();
          for (x in $scope.lmodify) {
            if ($scope.lmodify[x].fields.materials.pk === $event.currentTarget.parentElement.parentElement.children[1].innerText && $scope.lmodify[x].fields.brand.pk === data.brand && $scope.lmodify[x].fields.model.pk === data.model) {
              if (data.name === "brand") {
                $scope.lmodify[x].fields.brand.pk = $event.currentTarget.parentElement.parentElement.children[3].children[0].selectedOptions[0].value;
                $scope.lmodify[x].fields.brand.fields.brand = $event.currentTarget.parentElement.parentElement.children[3].children[0].selectedOptions[0].innerText;
                $event.currentTarget.dataset.old = $scope.lmodify[x].fields.brand.pk;
              }
              if (data.name === "model") {
                $scope.lmodify[x].fields.brand.pk = $event.currentTarget.parentElement.parentElement.children[4].children[0].selectedOptions[0].value;
                $scope.lmodify[x].fields.brand.fields.brand = $event.currentTarget.parentElement.parentElement.children[4].children[0].selectedOptions[0].innerText;
                $event.currentTarget.dataset.old = $scope.lmodify[x].fields.model.pk;
              }
              if (data.name === "quantity") {
                $scope.lmodify[x].fields.quantity = data.value;
                $event.currentTarget.dataset.old = $scope.lmodify[x].fields.quantity;
              }
              if (data.name === "ppurchase") {
                $scope.lmodify[x].fields.ppurchase = data.value;
                $event.currentTarget.dataset.old = $scope.lmodify[x].fields.ppurchase;
              }
              if (data.name === "psales") {
                $scope.lmodify[x].fields.psales = data.value;
                $event.currentTarget.dataset.old = $scope.lmodify[x].fields.psales;
              }
              break;
            }
          }
          Materialize.toast('Guardado OK', 1500, 'rounded');
        } else {
          Materialize.toast("Error, no se guardo, " + response.raise, 1500);
        }
      });
    };
    $scope.closeEditM = function($event) {
      var x;
      for (x in $scope.lmodify) {
        if ($scope.lmodify[x].fields.materials.pk === $event.currentTarget.parentElement.parentElement.children[1].innerText && $scope.lmodify[x].fields.brand.pk === $event.currentTarget.parentElement.parentElement.children[3].children[0].selectedOptions[0].value && $scope.lmodify[x].fields.model.pk === $event.currentTarget.parentElement.parentElement.children[4].children[0].selectedOptions[0].value) {
          $event.currentTarget.parentElement.parentElement.children[3].innerHTML = $scope.lmodify[x].fields.brand.fields.brand;
          $event.currentTarget.parentElement.parentElement.children[4].innerHTML = $scope.lmodify[x].fields.model.fields.model;
          $event.currentTarget.parentElement.parentElement.children[7].innerHTML = $scope.lmodify[x].fields.quantity;
          $event.currentTarget.parentElement.parentElement.children[8].innerHTML = $scope.lmodify[x].fields.ppurchase;
          $event.currentTarget.parentElement.parentElement.children[9].innerHTML = $scope.lmodify[x].fields.psales;
          break;
        }
      }
    };
    $scope.delEditM = function($event) {
      swal({
        title: "Eliminar Material?",
        text: "" + $event.currentTarget.parentElement.parentElement.children[2].innerText,
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Si!, eliminar",
        confirmButtonColor: "#dd6b55",
        cancelButtonText: "No!",
        closeOnConfirm: true
      }, function(isConfirm) {
        var data;
        if (isConfirm) {
          data = {
            materials: $event.currentTarget.parentElement.parentElement.children[1].innerText,
            brand: $event.currentTarget.dataset.brand,
            model: $event.currentTarget.dataset.model,
            delMM: true
          };
          return $http({
            url: "",
            method: "post",
            data: $.param(data)
          }).success(function(response) {
            if (response.status) {
              Materialize.toast("Se elimino correctamente", 1500);
              $scope.modifyList();
            } else {
              swal("Error", "No se a podido eliminar el material, intentelo otra vez.", "error");
            }
          });
        }
      });
    };
    $scope.calcMM = function() {
      $http.get("", {
        params: {
          samountp: true
        }
      }).success(function(response) {
        $scope.amnp = response.maarea.tpurchase;
        $scope.amns = response.maarea.tsales;
        $scope.ammp = response.mmodify.apurchase;
        $scope.amms = response.mmodify.asale;
        $scope.amsecp = response.sec[0].fields.amount;
        $scope.amsecs = response.sec[0].fields.amountsales;
        $scope.amstp = response.msector.tpurchase;
        return $scope.amsts = response.msector.tsales;
      });
    };
    $scope.delAllModifyArea = function($event) {
      swal({
        title: 'Anular ModificaciÃ³n?',
        text: 'se eliminara cualquier modificaciÃ³n realizada.',
        type: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#dd6b55',
        confirmButtonText: 'Anular ModificaciÃ³n',
        cancelButtonText: 'No!'
      }, function(isConfirm) {
        var data;
        if (isConfirm) {
          data = {
            'annModify': true
          };
          $http({
            url: '',
            method: 'post',
            data: $.param(data)
          }).success(function(response) {
            if (response.status) {
              $timeout((function() {
                location.reload();
              }), 2600);
            } else {
              swal("Alerta!", "No se a realizado la acciÃ³n. " + response.raise, "error");
            }
          });
        }
      });
    };
    $scope.approvedModify = function($event) {
      var validPrice;
      validPrice = function() {
        var defer, prm;
        defer = $q.defer();
        prm = {
          consultingprice: true
        };
        Factory.get(prm).success(function(response) {
          if (response.status) {
            if (response.lst.length > 0) {
              $scope.withoutprices = response.lst;
              Materialize.toast("Warning " + response.raise);
              angular.element("#mwithout").modal("open");
              defer.resolve(false);
            } else {
              defer.resolve(true);
            }
          } else {
            defer.resolve(false);
          }
        });
        return defer.promise;
      };
      validPrice().then(function(result) {
        if (result) {
          swal({
            title: "Aprobar modificaciÃ³n?",
            text: "Desea aprobar las modificaciones del Ã¡rea?",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#dd6b55",
            confirmButtonText: "Si!, Aprobar",
            closeOnConfirm: true,
            closeOnCancel: true
          }, function(isConfirm) {
            var data;
            if (isConfirm) {
              Materialize.toast("<i class=\"fa fa-cog fa-spin fa-fw\"></i>\n_Procesando...", "infinity", "toast-kill");
              $event.currentTarget.disabled = true;
              $event.currentTarget.innerHTML = "<i class=\"fa fa-spinner fa-pulse\"></i> Procesando";
              data = {
                approvedModify: true
              };
              $http({
                url: "",
                method: "post",
                data: $.param(data)
              }).success(function(response) {
                if (response.status) {
                  Materialize.toast("Se AprobÃ³!");
                  $timeout((function() {
                    location.reload();
                  }), 800);
                } else {
                  $event.currentTarget.className = "btn red grey-text text-darken-1";
                  $event.currentTarget.innerHTML = "<i class=\"fa fa-timescircle\"></i> Error!";
                }
              });
            }
          });
        } else {
          Materialize.toast("Existen item sin precio", 12000);
        }
      });
    };
    $scope.updatePrice = function(index) {
      var param;
      param = $scope.wout[index];
      param['updprice'] = true;
      Factory.post(param).success(function(response) {
        if (!response.status) {
          Materialize.toast("No se ha podido actualizar los precios.", 2400);
        }
      });
    };
    $scope.showCommentMat = function() {
      $("#commentm").modal('open');
      $("#mcs").val(this.$parent.x.fields.materials.pk).attr("data-brand", this.$parent.x.fields.brand.pk).attr("data-model", this.$parent.x.fields.model.pk);
      $scope.mmc = this.$parent.x.fields.comment;
      console.log(this.$parent.x.fields.comment);
      $scope.lblmcomment = this.$parent.x.fields.materials.fields.matnom + " " + this.$parent.x.fields.materials.fields.matmed;
    };
    $scope.saveComment = function($event) {
      var $d, data;
      $d = $("#mcs");
      data = {
        materials: $d.val(),
        brand: $d.attr("data-brand"),
        model: $d.attr("data-model"),
        comment: $scope.mmc,
        saveComment: true
      };
      $event.currentTarget.disabled = true;
      $event.currentTarget.innerHTML = "<i class=\"fa fa-spinner fa-pulse\"></i> Procesando";
      $http({
        url: "",
        method: "post",
        data: $.param(data)
      }).success(function(response) {
        $event.currentTarget.disabled = false;
        $event.currentTarget.innerHTML = "<i class=\"fa fa-floppy-o\"></i> GUARDAR";
        if (response.status) {
          $scope.mmc = '';
          $("#commentm").modal('close');
        }
      });
    };
    $scope.pOrders = function($event) {
      var counter, i, len, ref, x;
      counter = 0;
      ref = $scope.preorders;
      for (i = 0, len = ref.length; i < len; i++) {
        x = ref[i];
        if (x.status) {
          counter++;
        }
      }
      if (counter > 0) {
        $("#morders").modal('open');
      }
    };
    $scope.changeSelOrder = function($event) {
      var i, len, ref, x;
      ref = $scope.preorders;
      for (i = 0, len = ref.length; i < len; i++) {
        x = ref[i];
        if (x.tag !== '2') {
          x.status = Boolean(parseInt($event.currentTarget.value));
        }
      }
    };
    $scope.addobservation = function($index) {
      $scope.sitem = {};
      if ($scope.preorders[$index].hasOwnProperty('observation')) {
        $scope.sitem.observation = $scope.preorders[$index]['observation'];
      } else {
        $scope.preorders[$index].observation = '';
        $scope.sitem.observation = '';
      }
      $scope.sitem.index = $index;
      $scope.sitem.materials = $scope.preorders[$index]['materials'];
      angular.element("#editor").trumbowyg();
      angular.element("#editor").trumbowyg('html', $scope.sitem.observation);
      angular.element("#mobservation").modal('open');
    };
    $scope.saveobservation = function() {
      $scope.preorders[$scope.sitem.index]['observation'] = angular.element("#editor").trumbowyg('html');
      $scope.sitem = {};
      angular.element("#editor").trumbowyg('html', '');
      angular.element("#mobservation").modal('close');
    };
    $scope.deleteItemOrders = function($index) {
      var removeItem;
      console.log($index);
      $scope.preorders[$index].status = false;
      removeItem = function() {
        var counter, defer, i, len, ref, x;
        defer = $q.defer();
        counter = 0;
        ref = $scope.preorders;
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.status === true) {
            counter++;
          }
        }
        defer.resolve(counter);
        return defer.promise;
      };
      removeItem().then(function(response) {
        if (response <= 0) {
          angular.element("#morders").modal('close');
        }
      });
    };
    $scope.getNippleMaterials = function($index) {
      var getniples;
      $scope.setToastStatic("Obteniendo Niples, espere!", "cog");
      getniples = function() {
        var data, defer;
        defer = $q.defer();
        data = {
          nippleOrders: true,
          materials: $scope.preorders[$index].materials.pk,
          brand: $scope.preorders[$index].brand.pk,
          model: $scope.preorders[$index].model.pk
        };
        $http.get("", {
          params: data
        }).success(function(response) {
          console.log(response);
          defer.resolve(response);
        });
        return defer.promise;
      };
      getniples().then(function(response) {
        $scope.removeToastStatic();
        $scope.preorders[$index]['selected'] = response['nipple'];
        $scope.selectedniple['details'] = $scope.preorders[$index].selected;
        $scope.selectedniple['materials'] = $scope.preorders[$index].materials;
        $scope.selectedniple['index'] = $index;
        angular.element("#mselectedniple").modal('open');
      });
    };
    $scope.selectedmodalniples = function($event) {
      var i, len, ref, x;
      ref = $scope.selectedniple.details;
      for (i = 0, len = ref.length; i < len; i++) {
        x = ref[i];
        x.status = Boolean(parseInt($event.currentTarget.value));
      }
    };
    $scope.sumSelectedNiple = function() {
      var getAmountMeter;
      $scope.setToastStatic("Procesando!", "cog");
      getAmountMeter = function() {
        var amount, defer, i, len, ref, x;
        amount = 0;
        defer = $q.defer();
        ref = $scope.selectedniple.details;
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.status) {
            amount += $scope.toRound(x.fields.metrado * x.qorder);
          }
        }
        defer.resolve($scope.toRound(amount / 100));
        return defer.promise;
      };
      getAmountMeter().then(function(response) {
        var $index;
        $index = $scope.selectedniple['index'];
        $scope.preorders[$index]['selected'] = $scope.selectedniple['details'];
        $scope.preorders[$index]['qorder'] = response;
        angular.element("#mselectedniple").modal('close');
        $scope.selectedniple = {};
        $scope.removeToastStatic();
      });
    };
    $scope.nextStepOrder = function() {
      var statusQOrder;
      statusQOrder = function() {
        var defer, i, len, ref, x;
        defer = $q.defer();
        ref = $scope.preorders;
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.status && x.qorder <= 0) {
            defer.resolve(false);
            return defer.promise;
          }
        }
        defer.resolve(true);
        return defer.promise;
      };
      statusQOrder().then(function(status) {
        if (status) {
          $scope.ordersp1 = true;
          return $scope.ordersp2 = true;
        } else {
          return $scope.setToastStatic("Existen cantidades en 0.", "remove", 2200, false);
        }
      });
    };
    $scope.saveOrdersStorage = function($event) {
      swal({
        title: "Desea generar la orden?",
        text: '',
        type: "warning",
        showCancelButton: true,
        confirmButtonText: 'Si!, Generar!',
        confirmButtonColor: '#dd6b55',
        cancelButtonText: 'No',
        closeOnConfirm: true,
        closeOnCancel: true
      }, function(isConfirm) {
        var $file, data, k, ref, sendbedside, senddetails, v;
        if (isConfirm) {
          $scope.setToastStatic("Procesando!", "cog", 0);
          data = new FormData();
          if (!$scope.orders.hasOwnProperty("transfer")) {
            swal("", "Debe de seleccionar una fecha para la envio.", "warning");
            return false;
          }
          if ($scope.orders.transfer === "") {
            swal("", "Debe de seleccionar una fecha para la envio.", "warning");
            return false;
          }
          if (!$scope.orders.hasOwnProperty("storage")) {
            swal("", "Debe de seleccionar un almacÃ©n.", "warning");
            return false;
          }
          $file = $("#ordersfiles")[0];
          if ($file.files.length) {
            data.append("ordersf", $file.files[0]);
          }
          ref = $scope.orders;
          for (k in ref) {
            v = ref[k];
            data.append(k, v);
          }
          data.append("saveOrders", true);
          $scope.setToastStatic("Enviado datos al servidor", "upload", 1200, false);
          data.append("csrfmiddlewaretoken", $("[name=csrfmiddlewaretoken]").val());
          sendbedside = function() {
            var defer;
            defer = $q.defer();
            $.ajax({
              url: "",
              data: data,
              type: "post",
              dataType: "json",
              processData: false,
              contentType: false,
              cache: false,
              sendBefore: function(object, result) {
                $event.target.disabled = true;
                $event.target.innerHTML = "<i class=\"fa fa-cog fa-spin\"></i>";
              },
              success: function(response) {
                if (response.status) {
                  $scope.setToastStatic("Datos almancenados", "tasks", 1200, false);
                  defer.resolve(response.orders);
                } else {
                  defer.resolve(false);
                  swal("Error", "al procesar. " + response.raise, "error");
                  $event.target.disabled = false;
                  $event.target.className = "btn red grey-text text-darken-1";
                  $event.target.innerHTML = "<i class=\"fa fa-timescircle\"></i> Error!";
                }
              }
            });
            return defer.promise;
          };
          senddetails = function(order) {
            var defer, details, i, len, ref1, x;
            defer = $q.defer();
            details = [];
            ref1 = $scope.preorders;
            for (i = 0, len = ref1.length; i < len; i++) {
              x = ref1[i];
              if (x.status === true) {
                details.push(x);
              }
            }
            data = {
              'dordersave': true,
              'bedside': order,
              'details': JSON.stringify(details),
              'csrfmiddlewaretoken': angular.element("[name=csrfmiddlewaretoken]").val()
            };
            Factory.post(data).success(function(response) {
              if (response.status) {
                defer.resolve(true);
              } else {
                $scope.setToastStatic("Error " + response.raise, "remove");
                defer.resolve(false);
              }
            });
            return defer.promise;
          };
          sendbedside().then(function(bedside) {
            if (bedside !== false) {
              angular.element("#morders").modal('close');
              senddetails(bedside).then(function(response) {
                var mailer;
                if (response) {
                  $scope.setToastStatic("Enviado correo...!", "envelop-o", 3000, false);
                  mailer = {
                    to: "cvaldezch@outlook.com",
                    cc: response.cc,
                    subject: "Pedido Generado " + bedside,
                    body: "<p><strong><strong>" + response.company + " |\n</strong></strong> Operaciones Frecuentes</p>\n<p>Pedido Generado NÃºmero " + bedside + " |\n<strong>" + (new Date().toString()) + "</strong></p>\n<p><strong>Proyecto:&nbsp;" + response.project + " " + response.projectname + "</strong></p>"
                  };
                  mailing.Mailing();
                  mailing.geturls().success(function(rurl) {
                    if (rurl.status) {
                      mailer['server'] = rurl['servermail'];
                      mailing.send(mailer).success(function(res) {
                        if (res.status) {
                          $scope.removeToastStatic();
                        } else {
                          $scope.setToastStatic("Correo no enviado " + res.raise, "times", 0, false);
                        }
                      });
                    }
                    swal({
                      title: "Pedido Generado " + bedside,
                      text: '',
                      type: 'success',
                      confirmButtonColor: '#039be5',
                      closeOnConfirm: true
                    }, function(isConfirm) {
                      location.reload();
                    });
                  });
                } else {
                  angular.element("#morders").modal('open');
                }
              });
            }
          });
        }
      });
    };
    $scope.validUrl = function(file) {
      var uri;
      uri = "/media/" + file;
      return uri;
    };
    $scope.listPlanes = function() {
      $http.get('', {
        params: {
          'lplanes': true
        }
      }).success(function(response) {
        console.log(response);
        if (response.status) {
          $scope.lplanes = response.lplane;
        } else {
          console.error("No se ha podido lista los planos " + response.raise);
        }
      });
    };
    $scope.uploadPlane = function() {
      var data, form;
      data = {
        'uploadPlane': true,
        'plane': $scope.file,
        'note': $scope.note
      };
      form = new FormData;
      angular.forEach(data, function(value, key) {
        form.append(key, value);
      });
      $http.post("", form, {
        transformRequest: angular.identity,
        headers: {
          'Content-Type': void 0
        }
      }).success(function(response, status, headers, config) {
        if (response.status) {
          angular.element("#mdplane").modal('close');
          $scope.listPlanes();
        } else {
          swal("Alerta!", "No se a podido subir el archivo.", "error");
        }
      }).error(function(response, status, headers, config) {
        console.log(response);
      });
    };
    $scope.showFull = function(file) {
      angular.element("#sPlane > div > iframe").attr("src", $scope.validUrl(file));
      angular.element("#sPlane").modal('open');
    };
    $scope.delPlane = function(plane) {
      swal({
        title: "Realmente desea eliminar el plano?",
        text: "",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: 'Si!, Eliminar!',
        confirmButtonColor: '#dd6b55',
        cancelButtonText: 'No',
        closeOnConfirm: true,
        closeOnCancel: true
      }, function(isConfirm) {
        var data;
        if (isConfirm) {
          data = new FormData;
          data.append('delplane', true);
          data.append('plane', plane);
          $http.post("", data, {
            transformRequest: angular.identity,
            headers: {
              'Content-Type': void 0
            }
          }).success(function(response) {
            if (response.status) {
              $scope.listPlanes();
            } else {
              swal("Error", "No se a eliminado el plano seleccionado", "error");
            }
          });
        }
      });
    };
    $scope.listTemps = function(tp) {
      Factory.get({
        'lsttemp': true,
        'type': tp
      }).success(function(response) {
        if (response.status) {
          return $scope["lst" + tp] = response.listtmp;
        }
      });
    };
    $scope.enableModify = function(index, obj) {
      $scope.meditindex = index;
      $scope.objedit = obj;
      $scope.editm['materials'] = $scope.objedit.fields.materials.pk;
      $scope.editm['quantity'] = $scope.objedit.fields.quantity;
      $scope.editm['brand'] = $scope.objedit.fields.brand.pk;
      $scope.editm['model'] = $scope.objedit.fields.model.pk;
      $scope.editm['obrand'] = $scope.objedit.fields.brand.pk;
      $scope.editm['omodel'] = $scope.objedit.fields.model.pk;
      $scope.editm['missingsend'] = $scope.objedit.fields.qorder;
      $scope.editm['ppurchase'] = $scope.objedit.fields.ppurchase;
      $scope.editm['psales'] = $scope.objedit.fields.psales;
    };
    $scope.showEdit = function() {
      if (Object.keys($scope.objedit).length > 0) {
        angular.element("#msedit").modal('open');
        setTimeout((function() {
          angular.element("#edbrand,#edmodel").material_select();
        }), 600);
        console.log($scope.objedit);
      } else {
        Materialize.toast("<i class='fa fa-exclamation-circle amber-text'></i> &nbsp; Debe de elegir un material para modifcar.", 4400);
      }
    };
    $scope.saveModify = function() {
      var param;
      $scope.status = true;
      param = $scope.editm;
      param['saveModify'] = true;
      console.log(param);
      Factory.post(param).success(function(response) {
        $scope.status = false;
        angular.element("#msedit").modal('close');
        if (response.status) {
          $scope.status = false;
          console.log(response);
          $scope.disableModify();
          $scope.listTemps('M');
        } else {
          Materialize.toast("Error " + response.raise, 16000);
          return console.error("Error ", response);
        }
      });
    };
    $scope.enableDel = function() {
      if (Object.keys($scope.objedit).length > 0) {
        swal({
          title: "Realmente desea eliminar?",
          text: $scope.objedit.fields.materials.fields.matnom + "\n" + $scope.objedit.fields.materials.fields.matmed + "\n " + $scope.objedit.fields.brand.fields.brand + "\n " + $scope.objedit.fields.model.fields.model + "\n<br><small>Nota: si se ha realizado pedidos no\nse eliminara por completo quedara registrado\nla cantidad pedida.</small>",
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "Si!, eliminar",
          closeOnCancel: true,
          closeOnConfirm: true,
          html: true
        }, function(isConfirm) {
          var param;
          if (isConfirm) {
            console.log("Inside confirm delete material", isConfirm);
            param = $scope.editm;
            param['deleteReg'] = true;
            Factory.post(param).success(function(response) {
              if (response.status) {
                Materialize.toast("<i class=\"fa fa-check text-red\"></i>\n&nbsp;Item registrado para eliminar", 4000);
                $scope.listTemps('D');
              } else {
                Materialize.toast("Error: " + response.raise, 16000);
              }
            });
          }
        });
      } else {
        Materialize.toast("<i class='fa fa-exclamation-circle amber-text'></i> &nbsp; Debe de elegir un material para eliminar.", 4400);
      }
    };
    $scope.delModifiedNMD = function(type) {
      var valid;
      valid = function() {
        var defer, promises;
        defer = $q.defer();
        promises = [];
        angular.forEach($scope["lst" + type], function(obj, index) {
          if (obj.selected) {
            promises.push({
              'pk': obj.pk
            });
          }
        });
        $q.all(promises).then(function(result) {
          console.log(result);
          defer.resolve(result);
        });
        return defer.promise;
      };
      valid().then(function(result) {
        console.info(result);
        if (result.length > 0) {
          swal({
            title: 'Realmente desea eliminar?',
            text: 'Todos los items seleccionados',
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Si! eliminar",
            closeOnCancel: true,
            closeOnConfirm: true
          }, function(isConfirm) {
            var param;
            if (isConfirm) {
              Materialize.toast("<i class=\"fa fa-cog fa-spin fa-fw\"></i>\nProcesando TransacciÃ³n...", "forever", "toast-kill");
              param = {
                'delregdel': true,
                'data': JSON.stringify(result)
              };
              Factory.post(param).success(function(response) {
                angular.element('.toast-kill').remove();
                if (response.status) {
                  $scope.disableModify();
                  $scope.listTemps(type);
                  $scope.calcApproved();
                  Materialize.toast("<i class='fa fa-trash fa-lg red-text'></i>\n\ items eliminados!", 4000);
                } else {
                  console.error("Error ", response);
                }
              });
            }
          });
        } else {
          Materialize.toast("<i class=\"fa fa-exclamation-circle\nfa-lg amber-text\"></i>\nSe debe de seleccionar al menos un item", 4000);
        }
      });
    };
    $scope.setToastStatic = function(message, icon, duration, spin) {
      var ref, textspin;
      if (message == null) {
        message = "";
      }
      if (icon == null) {
        icon = "";
      }
      if (duration == null) {
        duration = 0;
      }
      if (spin == null) {
        spin = true;
      }
      if (duration === 0) {
        duration = "undefined";
      }
      textspin = (ref = spin) != null ? ref : {
        "fa-spin fa-fw": ""
      };
      Materialize.toast("<i class='fa fa-" + icon + " " + textspin + " fa-2x'></i>&nbsp; " + message, duration, "toast-remove");
    };
    $scope.removeToastStatic = function() {
      angular.element(".toast-remove").remove();
    };
    $scope.calcApproved = function() {
      var rdap, rdas, totalp, totals;
      $scope.pnp = parseFloat($scope.amnp);
      $scope.pns = parseFloat($scope.amns);
      $scope.pnp += $scope.tmlstN[0];
      $scope.pns += $scope.tmlstN[1];
      $scope.pnp += $scope.sldm[0][0];
      $scope.pnp -= $scope.sldm[0][1];
      $scope.pns += $scope.sldm[1][0];
      $scope.pns -= $scope.sldm[1][1];
      $scope.pnp -= $scope.tmlstD[0];
      $scope.pns -= $scope.tmlstD[1];
      $scope.pnp = $scope.pnp;
      $scope.pns = $scope.pns;
      rdap = ($scope.amstp - $scope.amnp) + $scope.pnp;
      totalp = $scope.amsecp - rdap;
      $scope.pgaa = totalp;
      rdas = ($scope.amsts - $scope.amns) + $scope.pns;
      totals = $scope.amsecs - rdas;
      $scope.pgpa = totalp;
      $scope.pgsa = totals;
      if (totalp >= 0) {
        $scope.mdstatus = true;
      } else {
        $scope.mdstatus = false;
      }
    };
    $scope.disableModify = function() {
      $scope.meditindex = -1;
      $scope.objedit = {};
      $scope.editm = {};
    };
    $scope.toRound = function(number) {
      return (Math.round(number * 100)) / 100;
    };
    $scope.$watch('ascsector', function() {
      if ($scope.ascsector) {
        $scope.fsl = true;
        $scope.fpl = true;
      }
    });
    calcSumTemp = function(arr, type) {
      if (arr !== void 0) {
        $scope["tmlst" + type] = [0, 0];
        $scope["tmlst" + type][0] = arr.reduce(function(sum, obj) {
          return sum + (obj.fields.ppurchase * obj.fields.quantity);
        }, 0);
        $scope["tmlst" + type][1] = arr.reduce(function(sum, obj) {
          return sum + (obj.fields.psales * obj.fields.quantity);
        }, 0);
        if (type === 'M') {
          $scope.sldm = [[0, 0], [0, 0]];
          $scope.sldm[0][0] = arr.reduce(function(sum, obj) {
            if (obj.fields.symbol === '+') {
              return sum + (obj.fields.ppurchase * obj.fields.quantity);
            } else {
              return sum + 0;
            }
          }, 0);
          $scope.sldm[0][1] = arr.reduce(function(sum, obj) {
            if (obj.fields.symbol === '-') {
              return sum + (obj.fields.ppurchase * obj.fields.quantity);
            } else {
              return sum + 0;
            }
          }, 0);
          $scope.sldm[1][0] = arr.reduce(function(sum, obj) {
            if (obj.fields.symbol === '+') {
              return sum + (obj.fields.psales * obj.fields.quantity);
            } else {
              return sum + 0;
            }
          }, 0);
          $scope.sldm[1][1] = arr.reduce(function(sum, obj) {
            if (obj.fields.symbol === '-') {
              return sum + (obj.fields.psales * obj.fields.quantity);
            } else {
              return sum + 0;
            }
          }, 0);
        }
        setTimeout((function() {
          $scope.calcApproved();
        }), 1200);
      }
    };
    $scope.$watch('lstN', function(nw, old) {
      if (nw !== void 0) {
        calcSumTemp(nw, 'N');
      }
    });
    $scope.$watch('lstM', function(nw, old) {
      if (nw !== void 0) {
        calcSumTemp(nw, 'M');
      }
    });
    $scope.$watch('lstD', function(nw, old) {
      if (nw !== void 0) {
        calcSumTemp(nw, 'D');
      }
    });
    $scope.$watch('dsmaterials', function() {
      var count, k;
      count = 0;
      for (k in $scope.dsmaterials) {
        if ($scope.dsmaterials[k].fields.nipple) {
          count++;
        }
      }
      if (count) {
        $scope.snipple = true;
        setTimeout(function() {
          $('.collapsible').collapsible();
        }, 800);
      }
    });
    $scope.$watch('gui.smat', function() {
      $(".floatThead").floatThead('reflow');
    });
  });

}).call(this);
